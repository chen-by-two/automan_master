{"name": "test_zjc_MerchantStore_003", "status": "broken", "statusDetails": {"message": "django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.", "trace": "self = <django.db.utils.ConnectionHandler object at 0x7fd53327b280>\nalias = 'default'\n\n    def __getitem__(self, alias):\n        try:\n>           return getattr(self._connections, alias)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/utils/connection.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asgiref.local.Local object at 0x7fd5332a5970>, key = 'default'\n\n    def __getattr__(self, key):\n        with self._thread_lock:\n            storage = self._get_storage()\n            if key in storage:\n                return storage[key]\n            else:\n>               raise AttributeError(f\"{self!r} object has no attribute {key!r}\")\nE               AttributeError: <asgiref.local.Local object at 0x7fd5332a5970> object has no attribute 'default'\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/asgiref/local.py:107: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_assistantappKwCases.Test_assistantapp object at 0x7fd533cf3940>\n\n    \t@allure.feature(\"门店管理-添加店员\")\n    \t@allure.severity(\"blocker\")\n    \tdef test_zjc_MerchantStore_003(self):\n    \t\t# 读取yaml文件\n    \t\tyamlFile = ckw.CommonKeyWord().Yaml_Read(\"/Users/zoudw/PycharmProjects/automan/testFile/ZhangJunChao/zjctest.yaml\")\n    \t\t# 读取yaml里手机号\n    \t\tmobile = ckw.CommonKeyWord().Yaml_GetByKey(yamlFile,\"mobileAssistant\")\n    \t\t# 读取Yaml登录密码\n    \t\tpassword = ckw.CommonKeyWord().Yaml_GetByKey(yamlFile,\"password\")\n    \t\t# 读取Yaml执行环节\n    \t\tenv = ckw.CommonKeyWord().Yaml_GetByKey(yamlFile,\"env\")\n    \t\t# 登录获取token-调取接口\n    \t\tloginRes = bkw.assistantappApi_UserLogin({\"header\":{\"Content-Type\": \"application/json;charsetUTF-8\"},\"parma\":{},\"data\":{\"mobile\":mobile,\"code\":password},\"env\":env},\"dict\")\n    \t\t# 登录获取token-提取token\n    \t\ttoken = ckw.CommonKeyWord().Json_GetJsonValue(loginRes,[[\"data\",\"token\"]])\n    \t\t# 登录获取userid-提取userid\n    \t\tuserid = ckw.CommonKeyWord().Json_GetJsonValue(loginRes,[[\"data\",\"id\"]])\n    \t\t# 打印token到控制台\n    \t\tckw.CommonKeyWord().Print_ToControl(\"token：\",token)\n    \t\t# 打印token到日志\n    \t\tckw.CommonKeyWord().Print_ToLog(\"token：\",token)\n    \t\t# 添加店员获取验证码-调取接口\n    \t\tV4CodeSend = bkw.assistantappApi_V4CodeSend({\"header\":{\"Content-Type\": \"application/json;charsetUTF-8\",\"Authorization\":\"Bearer\"+token},\"parma\":{},\"data\":{\"mobile\":\"15122222223\",\"sendMethod\":\"sms\",\"usage\":\"register\"}\n    ,\"env\":env},\"dict\")\n    \t\t# 提取添加店员返回\n    \t\tV4CodeSenderrno = ckw.CommonKeyWord().Json_GetJsonValue(V4CodeSend,[[\"errno\"]])\n    \t\t# 打印结果到控制台\n    \t\tckw.CommonKeyWord().Print_ToControl(\"V4CodeSenderrno:\",V4CodeSenderrno)\n    \t\t# 打印结果到日志\n    \t\tckw.CommonKeyWord().Print_ToLog(\"V4CodeSenderrno:\",V4CodeSenderrno)\n    \t\t# 读取yaml添加店员断言\n    \t\tErrno = ckw.CommonKeyWord().Yaml_GetByKey(yamlFile,\"Errno\")\n    \t\t# 打印结果到日志\n    \t\tckw.CommonKeyWord().Print_ToLog(\"添加店员验证码断言结果：\",Errno)\n    \t\t# 断言对比字典\n    \t\tassert ckw.CommonKeyWord().Assert_ObjAndObj(V4CodeSenderrno,Errno)\n    \t\t# 从数据库提取验证码-获取原始sql\n    \t\tAssistantSql = ckw.CommonKeyWord().Yaml_GetByKey(yamlFile,\"getAssistantCaptcha\")\n    \t\t# 打印sql到控制台\n    \t\tckw.CommonKeyWord().Print_ToControl(\"sql:\",AssistantSql)\n    \t\t# 打印sql到日志\n    \t\tckw.CommonKeyWord().Print_ToLog(\"sql:\",AssistantSql)\n    \t\t# 从数据库提取验证码-执行查询\n>   \t\tsqlReturn = ckw.CommonKeyWord().Db_MysqlSelect({\"host\":\"udtest.uniondrug.com\",\"port\":\"6033\",\"username\":\"test\",\"password\":\"tset@321abc\",\"database\":\"cn_uniondrug_module_data\",\"sql\":AssistantSql})\n\ntestCase/assistantapp/test_assistantappKwCases.py:1705: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nKeyWordDriver/CommonKeyWord.py:88: in Db_MysqlSelect\n    with connection.cursor() as cursor:\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/utils/connection.py:15: in __getattr__\n    return getattr(self._connections[self._alias], item)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/utils/connection.py:60: in __getitem__\n    if alias not in self.settings:\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/utils/functional.py:48: in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/utils/connection.py:45: in settings\n    self._settings = self.configure_settings(self._settings)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/db/utils.py:144: in configure_settings\n    databases = super().configure_settings(databases)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/utils/connection.py:50: in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/conf/__init__.py:82: in __getattr__\n    self._setup(name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LazySettings [Unevaluated]>, name = 'DATABASES'\n\n    def _setup(self, name=None):\n        \"\"\"\n        Load the settings module pointed to by the environment variable. This\n        is used the first time settings are needed, if the user hasn't\n        configured settings manually.\n        \"\"\"\n        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)\n        if not settings_module:\n            desc = (\"setting %s\" % name) if name else \"settings\"\n>           raise ImproperlyConfigured(\n                \"Requested %s, but settings are not configured. \"\n                \"You must either define the environment variable %s \"\n                \"or call settings.configure() before accessing settings.\"\n                % (desc, ENVIRONMENT_VARIABLE))\nE           django.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/django/conf/__init__.py:63: ImproperlyConfigured"}, "attachments": [{"name": "log", "source": "0c50b8d7-78f1-4f77-938d-3063ea69b70a-attachment.txt", "type": "text/plain"}], "start": 1621498218543, "stop": 1621498220078, "uuid": "6b717efa-1234-4c9d-ad02-4e07ce4a5190", "historyId": "fd2d769db9efb8d079c8070d03c994d3", "testCaseId": "b595b42c5fc42d08833a2ca9f17b48b5", "fullName": "testCase.assistantapp.test_assistantappKwCases.Test_assistantapp#test_zjc_MerchantStore_003", "labels": [{"name": "severity", "value": "blocker"}, {"name": "feature", "value": "门店管理-添加店员"}, {"name": "parentSuite", "value": "testCase.assistantapp"}, {"name": "suite", "value": "test_assistantappKwCases"}, {"name": "subSuite", "value": "Test_assistantapp"}, {"name": "host", "value": "localhost"}, {"name": "thread", "value": "2828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCase.assistantapp.test_assistantappKwCases"}]}